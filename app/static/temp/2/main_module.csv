1,Computer System,"The module Computer Systems is part of the second year of both the EE- and CS- bachelor program. It addresses the basics of computer systems (organization and architecture) and offers a specialization into digital hardware design for EE bachelors and operating systems for CS bachelors. In the project, which is mainly dealt with in the last two weeks of the module, EE- and CS-students cooperate to design and realize a system integrating all subjects of the first 8 weeks.Besides the topics related to computer systems, the module provides mathematics; 3 EC for CS covering Discrete Mathematics and 5 EC for EE covering Difference and Differential Equations.Within the CS curriculum, the following topics are included as Cross Cutting Concerns: academic skills, system development, concurrency and security. All these topics are covered within the module Computer Systems as well. Besides that, 1 EC is reserved for the subject “ICT en Recht” (in Dutch).
",1,Computer System
2,Data & Inforamtion,"In the module “Software systems” students have learnt to solve complicated software problems by means of stand-alone applications. In this module they learn and get experience in the design, implementation, and testing of complex multi-tier systems, using standard tools like database management systems, scripting frameworks and existing services (RESTful services). In this module, data (structured and semi-structured) play an important role. This comprises classically structured data in databases as well as obtaining data from social media and other web resources. Security will be explicitly dealt with.
A large project for an external client will be carried out by means of agile methods. As a consequence, students will gain experience in dealing with various stakeholders. Team skills are explicitly addressed as Academic Skills.
The mathematics in this module is concerned with probability theory.

Prerequisite knowledge:
Programming: Core concepts of imperative programming en object-oriented programming; being able to write software of average size (around ten classes) in Java. If you have adequate programming experience, but not in Java, you should additionally familiarize yourself with Java syntax and a Java software development environment like Eclipse.
Computer networks: Understanding the basic working of internet applications and protocols like HTTP.
Databases: No prerequisite knowledge required, but if you have no experience with elementary database concepts and data modelling, some extra effort is required to catch up.
Mathematics: No prerequisite knowledge required, but elementary knowledge of Set Theory and Mathematical Logic is helpful for understanding query languages.
 
For further details please contact the module coordinator.",1,Data & Inforamtion
3,Design Project,"The CS Design Project module is one of the two final modules of the Bachelor. In the design component of this module students show that they master the entire design trajectory, from the first informal specification of requirements by a client to the delivery and presentation of a well documented working product.
Projects are submitted by clients from either inside or outside the University. Students perform the project in groups of 3-5 students under supervision of a teacher from the department of Computer Science. The supervisor is also the one who assesses the process and products of the group. Project deliverables include a project proposal, a design report, a presentation and a poster.
The reflection component is intended to raise students’ awareness of the philosophical and ethical issues raised by the research component of the project.",1,Design Project
4,Discrete Struct. & Efficient Algorithms,"Students learn and understand different discrete structures in mathematics and computer science. These are graphs, finite automata, as well as algebraic structures. Next to understanding the necessary definitions along with classical theorems, the focus is on using these discrete structures for modeling and problem solving, most notably the design and analysis of efficient algorithms for the solution of practically relevant problems, for example shortest path computation, searching in texts, or public key encryption. As to algorithm design and analysis, students learn to practically implement and test algorithms, but also develop the necessary toolbox for the design and analysis of algorithms in terms of correctness and computation time. The course combines lectures, theory tutorials, practical tutorials, as well as one larger implementation and research project on graph isomorphism. The project includes the implementation and testing of several algorithms of different levels of complexity, and a final documentation of the achieved results.",1,Discrete Struct. & Efficient Algorithms
5,Intelligent Interaction Design,"This module is about designing, realising and evaluating the interaction between people and technical systems. Within the module, students design an interactive (and possibly intelligent) system and evaluate it with potential users. This is done in the project, which is a central part of the module. In the project, the students work in teams to design and evaluate an interactive system. Through lectures, colstructions and self-study on design and evaluation of human-computer interaction and on statistics, students learn about various methods for conducting user studies, and quantitative and qualitative methods to analyse the resulting data. In the artificial intelligence part of the module, students learn and apply various techniques to model intelligent system behaviour.",1,Intelligent Interaction Design
6,Network System,"The module Network Systems focuses on computer networking for open infrastructures, such as the Internet and GSM/UMTS, as well as embedded networks, such as sensor, in-car and home-automation networks. Such networks are typically designed using a layered architecture of protocols. This course covers all layers of this architecture: physical layer (e.g., Shannon limit, error correction, propagation), link layer (e.g., medium access control, retransmission schemes, switching), network layer (e.g., routing, addressing, router architecture), transport (e.g., congestion control, flow control), and application layer (email, web, peer2peer). It covers both basic principles of communication systems, networks, and networked applications, as well as the operation of key protocols underlying the operation of the Internet (e.g., Ethernet, IP, TCP, DNS). Furthermore, the course treats security aspects, some basic performance models, and network monitoring tools.

For information about the mathematics part of the module (including instruction forms, grading, course material, etc.) please see the relevant blackboard page (you have to be logged in and enrolled).

assessment:
Additional requirements: average of programming and the 4 written tests must be at least 5.5; each of programming and the 4 written tests must be at least 5.0; only one of programming and the 4 written tests is allowed to be below 5.5.",1,Network System
7,Pearls of Computer Science,"In this module, the student receives an introduction to eight ‘pearls’ of computer science covering the breadth of the discipline. One gets acquainted with computer architecture, programming of algorithms, encryption, software development, the internet as computer network, functional programming, artificial intelligence, and databases. Besides this, students work together on a project that either realizes a system that automatically and in an intelligent manner analyses and visualizes Twitter messages, or realizes a security system based on secure passes.",1,Pearls of Computer Science
8,Programming Paradigms,"Up until this point, the students have mainly learned imperative, object-oriented programming. This module will extend their awareness and ability in the following directions:
Non-imperative programming: in particular, the functional paradigm (extensively) and the logic paradigm (briefly)
Programming for concurrent systems: concepts, data structures and algorithms for multi-core and GPU-based parallelism
Programming language technology: parsing, compilation and code generation
These three strands are initially taught separately and come together in the module project, where the students develop a compiler for their own language with support for parallelism, generating code that runs on an extensible hardware emulator written in a functional language.
 
The module presents a mixture of
Lectures to provide an overview and motivation of the material
Exercise sessions to get familiar with the concepts
Laboratory exercises to practice the acquired skills
Small projects and a larger final project.",1,Programming Paradigms
9,Research Project,"Students will have to go through a standard research trajectory, starting from identifying a research topic (within a certain domain), writing a research proposal, performing the research, and presenting the results (in a paper and a presentation)
 
Two important deliverables are needed:
Research proposal. As a first step towards carrying out a research project each student has to write a research proposal highlighting the context, problem statement, importance, state of the art, methodology, expected results and planning. A draft proposal will be reviewed by the corresponding track chair and peer-students.
Research paper. Upon acceptance of the proposal each student will perform the proposed research. The results of the research will be described in a scientific paper following the submission guidelines of the conference. The paper will be reviewed by student peers as well as the track organizers.
Submission and review of proposals and papers will be managed through an online conference paper management system. All accepted papers will be made available on the Conference website, and will be presented at the conference.",1,Research Project
10,Software System,"In this module the students are introduced to the design, implementation and testing of software systems, and to performing a project independently.

For the design of software systems, they learn to use Software Engineering models, particularly the UML diagrams (class diagrams, activity diagrams and statecharts), and they get acquainted with the waterfall software development processes.

For the programming of software systems, they learn the core concepts of program structuring, object-orientation and multi-threading with the help of the Java programming language, with attention to correctness by means of (informal) preconditions and postconditions. In addition, the module addresses security engineering aspects in the context of Java. In this module the students build upon the knowledge on algorithms and recursion acquired in Module 1. For testing software systems, the students learn to distinguish among the different levels at which testing can be performed (specially unit testing and system testing), the principles underlying a test plan and a couple of relatively simple testing techniques.

For academic and project skills, attention is given to project management, planning, time- and self management, and reflection on one’s own behavior w.r.t. planning.

For the mathematics, this module contains the so-called ’Newton’ package, which covers the theory of mathematical functions and integrals.",1,Software System
11,Test,test,1,
12,Test2,test2,1,
13,pearl new,good new,2,
